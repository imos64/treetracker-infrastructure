{{- range $i, $o := .Values.orderers }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $o.name }}
  labels:
    app.kubernetes.io/name: {{ $o.name }}
    app.kubernetes.io/component: orderer
    app.kubernetes.io/instance: {{ include "fabric-orderer.fullname" $ }}
    helm.sh/chart: {{ $.Chart.Name }}-{{ $.Chart.Version }}
spec:
  serviceName: {{ $o.name }}
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $o.name }}
      app.kubernetes.io/component: orderer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ $o.name }}
        app.kubernetes.io/component: orderer
        app.kubernetes.io/instance: {{ include "fabric-orderer.fullname" $ }}
        helm.sh/chart: {{ $.Chart.Name }}-{{ $.Chart.Version }}
      annotations:
        # Use root context ($) so included template sees .Values
        checksum/orderer-config: {{ include (print $.Template.BasePath "/configmap.yaml") $ | sha256sum }}
    spec:
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      initContainers:
        - name: init-msp-tls
          image: "{{ $.Values.initImage.repository }}:{{ $.Values.initImage.tag }}"
          imagePullPolicy: {{ $.Values.initImage.pullPolicy }}
          command: ["/bin/sh","-c"]
          args:
            - |
              set -euo pipefail

              DEST=/var/hyperledger/orderer
              MSP=${DEST}/msp

              # Create MSP structure
              mkdir -p ${MSP}/cacerts ${MSP}/signcerts ${MSP}/keystore ${MSP}/tlscacerts

              # Copy MSP from secret (supports both structured and flat secrets)
              if [ -d /msp-src/cacerts ] || [ -d /msp-src/signcerts ] || [ -d /msp-src/keystore ]; then
                cp -a /msp-src/cacerts/*   ${MSP}/cacerts/   2>/dev/null || true
                cp -a /msp-src/signcerts/* ${MSP}/signcerts/ 2>/dev/null || true
                cp -a /msp-src/keystore/*  ${MSP}/keystore/  2>/dev/null || true
                [ -f /msp-src/config.yaml ] && cp /msp-src/config.yaml ${MSP}/config.yaml || true
              else
                # Flat secret: reconstruct layout from filenames
                if [ -f /msp-src/cert.pem ]; then
                  cp /msp-src/cert.pem ${MSP}/signcerts/cert.pem
                else
                  FIRST_CERT="$(ls -1 /msp-src/*.pem 2>/dev/null | grep -viE 'ca|root' | head -n1 || true)"
                  [ -n "${FIRST_CERT}" ] && cp "${FIRST_CERT}" ${MSP}/signcerts/cert.pem || true
                fi
                SK="$(ls -1 /msp-src/*_sk 2>/dev/null | head -n1 || true)"
                [ -n "${SK}" ] && cp "${SK}" ${MSP}/keystore/ || true
                for f in /msp-src/*.pem; do
                  [ -e "$f" ] || break
                  bn="$(basename "$f")"
                  echo "$bn" | grep -qiE 'ca|root|cacert' && cp "$f" ${MSP}/cacerts/ || true
                done
                [ -f /msp-src/config.yaml ] && cp /msp-src/config.yaml ${MSP}/config.yaml || true
              fi

              # TLS files (expect normalized names in the TLS secret)
              mkdir -p ${DEST}/tls
              cp /tls-src/server.crt ${DEST}/tls/server.crt
              cp /tls-src/server.key ${DEST}/tls/server.key
              cp /tls-src/ca.crt     ${DEST}/tls/ca.crt

              # Also place TLS CA into MSP tlscacerts (recommended)
              cp ${DEST}/tls/ca.crt ${MSP}/tlscacerts/tls-ca.pem

              # Tighten key perms
              chmod 600 ${MSP}/keystore/* 2>/dev/null || true
          volumeMounts:
            - name: msp-src
              mountPath: /msp-src
              readOnly: true
            - name: tls-src
              mountPath: /tls-src
              readOnly: true
            - name: orderer-writable
              mountPath: /var/hyperledger/orderer

      containers:
        - name: orderer
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          command: ["orderer"]
          env:
            - name: FABRIC_LOGGING_SPEC
              value: "INFO"

            # Listen
            - name: ORDERER_GENERAL_LISTENADDRESS
              value: "0.0.0.0"
            - name: ORDERER_GENERAL_LISTENPORT
              value: "{{ $.Values.ports.client | toString }}"

            # MSP
            - name: ORDERER_GENERAL_LOCALMSPID
              value: "{{ $o.mspID }}"
            - name: ORDERER_GENERAL_LOCALMSPDIR
              value: "/var/hyperledger/orderer/msp"

            # TLS
            - name: ORDERER_GENERAL_TLS_ENABLED
              value: "true"
            - name: ORDERER_GENERAL_TLS_PRIVATEKEY
              value: "/var/hyperledger/orderer/tls/server.key"
            - name: ORDERER_GENERAL_TLS_CERTIFICATE
              value: "/var/hyperledger/orderer/tls/server.crt"
            - name: ORDERER_GENERAL_TLS_ROOTCAS
              value: "[/var/hyperledger/orderer/tls/ca.crt]"

            # Cluster (RAFT) - host-only address + separate port (fixes :7051:7051)
            - name: ORDERER_GENERAL_CLUSTER_LISTENADDRESS
              value: "0.0.0.0"
            - name: ORDERER_GENERAL_CLUSTER_LISTENPORT
              value: "{{ $.Values.ports.cluster | toString }}"
            - name: ORDERER_GENERAL_CLUSTER_SERVERCERTIFICATE
              value: "/var/hyperledger/orderer/tls/server.crt"
            - name: ORDERER_GENERAL_CLUSTER_SERVERPRIVATEKEY
              value: "/var/hyperledger/orderer/tls/server.key"
            - name: ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE
              value: "/var/hyperledger/orderer/tls/server.crt"
            - name: ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY
              value: "/var/hyperledger/orderer/tls/server.key"
            - name: ORDERER_GENERAL_CLUSTER_ROOTCAS
              value: "[/var/hyperledger/orderer/tls/ca.crt]"

            # Config file path
            - name: ORDERER_CFGFILE
              value: "/etc/hyperledger/fabric/orderer.yaml"

            # Bootstrap mode (Participation API default)
            - name: ORDERER_GENERAL_BOOTSTRAPMETHOD
              value: "{{ ternary "file" "none" $.Values.genesis.enabled }}"
            {{- if $.Values.genesis.enabled }}
            - name: ORDERER_GENERAL_BOOTSTRAPFILE
              value: "{{ $.Values.genesis.mountPath }}/{{ $.Values.genesis.fileName }}"
            {{- end }}

            # Ops & metrics
            - name: ORDERER_OPERATIONS_LISTENADDRESS
              value: "0.0.0.0:{{ $.Values.ports.operations | toString }}"
            - name: ORDERER_METRICS_PROVIDER
              value: "prometheus"

          ports:
            - name: client
              containerPort: {{ $.Values.ports.client }}
            - name: cluster
              containerPort: {{ $.Values.ports.cluster }}
            - name: operations
              containerPort: {{ $.Values.ports.operations }}

          volumeMounts:
            - name: orderer-writable
              mountPath: /var/hyperledger/orderer
            - name: ledger
              mountPath: /var/hyperledger/production/orderer
            - name: orderer-config
              mountPath: /etc/hyperledger/fabric
              readOnly: true

          resources:
            {{- toYaml $.Values.resources | nindent 12 }}

          {{- if $.Values.probes.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: {{ $.Values.probes.liveness.path }}
              port: operations
            initialDelaySeconds: {{ $.Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ $.Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ $.Values.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ $.Values.probes.liveness.failureThreshold }}
          {{- end }}

          {{- if $.Values.probes.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: {{ $.Values.probes.readiness.path }}
              port: operations
            initialDelaySeconds: {{ $.Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ $.Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ $.Values.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ $.Values.probes.readiness.failureThreshold }}
          {{- end }}

      volumes:
        - name: orderer-writable
          emptyDir: {}
        - name: orderer-config
          configMap:
            name: {{ include "fabric-orderer.fullname" $ }}-config
            items:
              - key: orderer.yaml
                path: orderer.yaml
        # Read-only secrets (only init container reads them)
        - name: msp-src
          secret:
            secretName: {{ $o.mspSecretName }}
        - name: tls-src
          secret:
            secretName: {{ $o.tlsSecretName }}
        {{- if $.Values.genesis.enabled }}
        - name: genesis-src
          secret:
            secretName: {{ $.Values.genesis.secretName }}
        {{- end }}

  volumeClaimTemplates:
    - metadata:
        name: ledger
      spec:
        accessModes: ["ReadWriteOnce"]
        {{- if $.Values.storage.storageClassName }}
        storageClassName: {{ $.Values.storage.storageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ $.Values.storage.size }}
---
{{- end }}
